<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="LODE">
  <property environment="env"/>
  <property name="env.SERVLET_DIR" value="/usr/share/tomcat7/lib"/>
  <property name="env.SERVLET_JAR" value="servlet-api.jar"/>
  <property name="env.IMPLEMENTATION_TITLE" value="UNKNOWN"/>
  <property name="env.IMPLEMENTATION_VERSION" value="UNKNOWN"/>
  <property name="env.IMPLEMENTATION_VENDOR" value="UNKNOWN"/>
  <property name="env.IMPLEMENTATION_VENDOR_URL" value=""/>
  <property name="env.SRC_DIR" value="src/main/java"/>
  <property name="env.SCRIPT_DIR" value="src/main/script"/>
  <property name="env.WEBAPP_DIR" value="src/main/webapp"/>
  <property name="env.BUILD_DIR" value="build"/>
  <property name="env.WAR_DIR" value="${env.BUILD_DIR}/war"/>
  <property name="env.JAR_DIR" value="${env.BUILD_DIR}/jar"/>
  <property name="env.OUT_DIR" value="out"/>
  <property name="env.OUT_FILE" value="LODE-${env.IMPLEMENTATION_VERSION}"/>
  <property name="env.TEST_URL" value="http://www.essepuntato.it/2008/12/earmark"/>
  <property name="env.TEST_SOURCE" value="earmark.rdf"/>
  <property name="env.TEST_DIR" value="test"/>
  <property name="env.TEST_PATH" value="${env.TEST_DIR}/${env.TEST_SOURCE}"/>
  <property name="env.TEST_HTML" value="${env.TEST_DIR}/earmark.htm"/>
  <property name="absoluteTestPath" location="${env.TEST_PATH}"/>
  <property name="absoluteTestHtml" location="${env.TEST_HTML}"/>

  <scriptdef name="propertyreset" language="javascript" description="Allows to assign @{property} new value">
    <attribute name="name"/>
    <attribute name="value"/>
	project.setProperty(attributes.get("name"), attributes.get("value"));
  </scriptdef>
	
  <target name="mvn-init" unless="compile.classpath" xmlns:artifact="urn:maven-artifact-ant">
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpath="lib/maven-ant-tasks.jar"/> 
    <condition property="maven.repo.local" value="${maven.repo.local}" else="${user.home}/.m2/repository">
      <isset property="maven.repo.local"/>
    </condition>           
    <echo>maven.repo.local=${maven.repo.local}</echo>
    <artifact:localRepository id="local.repository" path="${maven.repo.local}"/> 
    <artifact:pom file="pom.xml" id="maven.project"/>
    <artifact:dependencies pathId="compile.classpath" filesetId="compile.fileset" useScope="compile">
      <pom refid="maven.project"/>
      <localRepository refid="local.repository"/>
    </artifact:dependencies>
    <artifact:dependencies pathId="test.classpath" filesetId="test.fileset" useScope="test">
      <pom refid="maven.project"/>
      <localRepository refid="local.repository"/>
    </artifact:dependencies>
    <artifact:dependencies pathId="runtime.classpath" filesetId="runtime.fileset" useScope="runtime">
      <pom refid="maven.project"/>
      <localRepository refid="local.repository"/>
    </artifact:dependencies>
  	<script language="javascript">
  		// Retrieve implementation properties from the POM file.
  		var name = project.getProperty("maven.project.name");
  		var url = project.getProperty("maven.project.url");
  		var vendorName = project.getProperty("maven.project.properties.vendor-name");
  		var vendorUrl = project.getProperty("maven.project.properties.vendor-url");
  	    var version = project.getProperty("maven.project.version");
  		var sourceBase = project.getProperty("maven.project.properties.source-base");
  		var visBase = project.getProperty("maven.project.properties.vis-base");
  		
  		// Set specification properties for use in the manifest(s).
  		project.setProperty("env.SPECIFICATION_TITLE", name);
  		project.setProperty("env.SPECIFICATION_VENDOR", vendorName);
 		project.setProperty("env.SPECIFICATION_VENDOR_URL", vendorUrl);
  		project.setProperty("env.SPECIFICATION_URL", url);
  	    project.setProperty("env.SPECIFICATION_VERSION", version.replace(/(\d+\.\d+).*/, "$1"));
 	    project.setProperty("env.SOURCE_BASE", sourceBase);
 	    project.setProperty("env.VIS_BASE", visBase);
  		
  		// Ensure implementation version properties have been set to something sensible.
  		var implTitle = project.getProperty("env.IMPLEMENTATION_TITLE");
  		if (implTitle == 'UNKNOWN'){
  		  project.setProperty("env.IMPLEMENTATION_TITLE", name);
  		}
  		var implVersion = project.getProperty("env.IMPLEMENTATION_VERSION");
  		if (implVersion == 'UNKNOWN'){
  			project.setProperty("env.IMPLEMENTATION_VERSION", version);
  	  		project.setProperty("env.OUT_FILE", "LODE-" + version);
  		}
  	</script>
  	<echo>env.SPECIFICATION_TITLE=${env.SPECIFICATION_TITLE}</echo>
  	<echo>env.SPECIFICATION_VENDOR=${env.SPECIFICATION_VENDOR}</echo>
  	<echo>env.SPECIFICATION_VENDOR_URL=${env.SPECIFICATION_VENDOR_URL}</echo>
  	<echo>env.SPECIFICATION_URL=${env.SPECIFICATION_URL}</echo>
  	<echo>env.SPECIFICATION_VERSION=${env.SPECIFICATION_VERSION}</echo>
  	<echo>env.SOURCE_BASE=${env.SOURCE_BASE}</echo>
  	<echo>env.VIS_BASE=${env.VIS_BASE}</echo>
  	<echo>env.IMPLEMENTATION_TITLE=${env.IMPLEMENTATION_TITLE}</echo>
  	<echo>env.IMPLEMENTATION_VENDOR=${env.IMPLEMENTATION_VENDOR}</echo>
  	<echo>env.IMPLEMENTATION_VENDOR_URL=${env.IMPLEMENTATION_VENDOR_URL}</echo>
  	<echo>env.IMPLEMENTATION_VERSION=${env.IMPLEMENTATION_VERSION}</echo>
  	<manifest file="${env.WEBAPP_DIR}/META-INF/MANIFEST.MF" mode="update">
	  <attribute name="Specification-Title" value="${env.SPECIFICATION_TITLE} Servlets"/>  
	  <attribute name="Specification-Vendor" value="${env.SPECIFICATION_VENDOR}"/>
  	  <attribute name="Specification-Vendor-Url" value="${env.SPECIFICATION_VENDOR_URL}"/>
  	  <attribute name="Specification-Url" value="${env.SPECIFICATION_URL}"/>
  	  <attribute name="Specification-Version" value="${env.SPECIFICATION_VERSION}"/>
	  <attribute name="Implementation-Title" value="${env.IMPLEMENTATION_TITLE} Servlets"/>  
	  <attribute name="Implementation-Vendor" value="${env.IMPLEMENTATION_VENDOR}"/>
 	  <attribute name="Implementation-Vendor-Url" value="${env.IMPLEMENTATION_VENDOR_URL}"/>
   	  <attribute name="Implementation-Version" value="${env.IMPLEMENTATION_VERSION}"/>
  	  <attribute name="Source-Base" value="${env.SOURCE_BASE}"/>
  	  <attribute name="Vis-Base" value="${env.VIS_BASE}"/>
  	</manifest>
  </target>
		
  <target name="clean">
  	<delete dir="${env.BUILD_DIR}" />
  	<delete dir="${env.OUT_DIR}" />
  	<delete dir="${env.TEST_DIR}/lode" />
  	<delete file="${env.TEST_HTML}" />
  </target>

  <target name="compile" depends="mvn-init,clean">
  	<sleep seconds="2"/> <!-- try to avoid race condition with delete in 'clean' task -->
    <mkdir dir="${env.BUILD_DIR}" />
    <mkdir dir="${env.BUILD_DIR}/classes" />
    <javac destdir="${env.BUILD_DIR}/classes" srcdir="${env.SRC_DIR}" classpathref="compile.classpath" includeantruntime="false" failonerror="true">
      <compilerarg value="-Xlint:deprecation"/>
    </javac>
    <copy todir="${env.BUILD_DIR}/classes">
      <fileset dir="${env.SRC_DIR}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
  	<copy todir="${env.BUILD_DIR}" file="${env.WEBAPP_DIR}/META-INF/MANIFEST.MF"/>
  	<tstamp>
  	  <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
    </tstamp>
  	<manifest file="${env.BUILD_DIR}/MANIFEST.MF" mode="update">
  	  <attribute name="Implementation-Title" value="${env.IMPLEMENTATION_TITLE} Servlets"/>  
  	  <attribute name="Implementation-Version" value="${env.IMPLEMENTATION_VERSION}"/>
  	  <attribute name="Implementation-Vendor" value="${env.IMPLEMENTATION_VENDOR}"/>
   	  <attribute name="Implementation-Vendor-Url" value="${env.IMPLEMENTATION_VENDOR_URL}"/>
  	  <attribute name="Build-Date" value="${TODAY}"/>                 
  	</manifest>
  </target>
	
  <target name="war" depends="compile">
    <mkdir dir="${env.WAR_DIR}" />
    <copy todir="${env.WAR_DIR}">
      <fileset dir="${env.WEBAPP_DIR}">
      </fileset>
    </copy>
  	<copy todir="${env.WAR_DIR}/META-INF" file="${env.BUILD_DIR}/MANIFEST.MF"/>
    <copy todir="${env.WAR_DIR}/WEB-INF/classes">
      <fileset dir="${env.BUILD_DIR}/classes"/>
    </copy>
  	<copy todir="${env.WAR_DIR}/WEB-INF/lib" flatten="true">
      <fileset refid="runtime.fileset"/>
  	</copy>
    <mkdir dir="${env.OUT_DIR}" />
    <war basedir="${env.WAR_DIR}" destfile="${env.OUT_DIR}/${env.OUT_FILE}.war" webxml="${env.WAR_DIR}/WEB-INF/web.xml">
      <webinf dir="${env.WAR_DIR}/WEB-INF/">
        <include name="**/*.jar" />
      </webinf>
    </war>
  </target>
  <target name="jar" depends="compile">
    <mkdir dir="${env.JAR_DIR}" />
  	<copy todir="${env.JAR_DIR}">
  	  <fileset dir="${env.SCRIPT_DIR}"/>
  	</copy>
  	<copy todir="${env.JAR_DIR}/server">
      <fileset dir="${env.WEBAPP_DIR}/server"/>
  	</copy>
  	<copy todir="${env.JAR_DIR}/client">
  	  <fileset dir="${env.WEBAPP_DIR}/client"/>
  	</copy>
  	<copy todir="${env.JAR_DIR}/lib" flatten="true">
      <fileset refid="runtime.fileset"/>
  	</copy>
  	<path id="lib.jars">
  	  <fileset dir="${env.JAR_DIR}">
  	  	<include name="lib/*.jar"/>
  	  </fileset>
	</path>
  	<manifestclasspath property="lib.jar.list" jarfile="${env.JAR_DIR}/${env.OUT_FILE}.jar">
  	  <classpath refid="lib.jars" />
  	</manifestclasspath>
  	<copy todir="${env.JAR_DIR}/META-INF" file="${env.BUILD_DIR}/MANIFEST.MF"/>  	
	<manifest file="${env.JAR_DIR}/META-INF/MANIFEST.MF" mode="update">             
	  <attribute name="Main-Class" value="it.essepuntato.lode.LodeApp"/>
	  <attribute name="Class-Path" value="${lib.jar.list}"/>
	</manifest>
  	<echo message="Classpath: ${lib.jar.list}"/>	
  	<jar destfile="${env.JAR_DIR}/${env.OUT_FILE}.jar" basedir="${env.BUILD_DIR}/classes" manifest="${env.JAR_DIR}/META-INF/MANIFEST.MF"/>
  	<tar destfile="${env.OUT_DIR}/${env.OUT_FILE}_cmd-line.tar.gz" basedir="${env.JAR_DIR}" compression="gzip"/>
  </target>
  <target name="can_cmd_line" depends="mvn-init">
  	<available file="${env.JAR_DIR}/${env.OUT_FILE}.jar" property="jar.exists"/>
  	<fail message="JAR file '${env.JAR_DIR}/${env.OUT_FILE}.jar' not found." unless="jar.exists"/>
  </target>	
  <target name="do_cmd_line" depends="can_cmd_line" if="jar.exists">
	<java jar="${env.JAR_DIR}/${env.OUT_FILE}.jar" fork="true" failonerror="true">
	  <arg value="-url"/>
	  <arg value="${env.TEST_URL}"/>
	  <arg value="-source"/>
	  <arg value="${env.TEST_SOURCE}"/>
	  <arg value="-path"/>
	  <arg value="${absoluteTestPath}"/>
	  <arg value="-html"/>
	  <arg value="${absoluteTestHtml}"/>
	  <arg value="-imported"/>
	  <arg value="-closure"/>
	  <arg value="-reasoner"/>
  	</java>
  </target>	
  <target name="build" depends="compile">
  </target>	
  <target name="all" depends="war,jar">
  </target>	
</project>
